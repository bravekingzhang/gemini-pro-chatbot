import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  Pressable,
  TextInput,
  Share,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { MaterialIcons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { generateCompletion } from '@/utils/gemini';
import { nanoid } from 'nanoid/non-secure';
import { useTheme } from '@/contexts/ThemeContext';

const DISCOVER_STORAGE_KEY = '@gemini_discover';
const API_KEY_STORAGE_KEY = '@gemini_api_key';

interface DiscoverItem {
  id: string;
  prompt: string;
  content: string;
  type: 'story' | 'poem' | 'joke' | 'quote';
  createdAt: number;
  likes: number;
}

const CONTENT_TYPES = [
  { id: 'story', name: 'Story', icon: 'auto-stories', prompt: 'Write a creative short story about' },
  { id: 'poem', name: 'Poem', icon: 'format-quote', prompt: 'Write a poem about' },
  { id: 'joke', name: 'Joke', icon: 'mood', prompt: 'Tell a funny joke about' },
  { id: 'quote', name: 'Quote', icon: 'format-quote', prompt: 'Generate an inspirational quote about' },
];

export default function DiscoverScreen() {
  const { isDarkMode } = useTheme();
  const [items, setItems] = useState<DiscoverItem[]>([]);
  const [selectedType, setSelectedType] = useState(CONTENT_TYPES[0]);
  const [prompt, setPrompt] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [apiKey, setApiKey] = useState<string | null>(null);

  useEffect(() => {
    loadApiKey();
    loadItems();
  }, []);

  const loadApiKey = async () => {
    try {
      const savedApiKey = await AsyncStorage.getItem(API_KEY_STORAGE_KEY);
      setApiKey(savedApiKey);
    } catch (error) {
      console.error('Error loading API key:', error);
    }
  };

  const loadItems = async () => {
    try {
      const savedItems = await AsyncStorage.getItem(DISCOVER_STORAGE_KEY);
      if (savedItems) {
        setItems(JSON.parse(savedItems));
      }
    } catch (error) {
      console.error('Error loading items:', error);
    }
  };

  const saveItems = async (newItems: DiscoverItem[]) => {
    try {
      await AsyncStorage.setItem(DISCOVER_STORAGE_KEY, JSON.stringify(newItems));
    } catch (error) {
      console.error('Error saving items:', error);
    }
  };

  const handleGenerate = async () => {
    if (!prompt.trim() || !apiKey) return;

    setIsLoading(true);
    try {
      const fullPrompt = `${selectedType.prompt} ${prompt.trim()}`;
      const content = await generateCompletion([
        { role: 'user', content: fullPrompt }
      ]);

      const newItem: DiscoverItem = {
        id: nanoid(),
        prompt: prompt.trim(),
        content,
        type: selectedType.id as any,
        createdAt: Date.now(),
        likes: 0,
      };

      const updatedItems = [newItem, ...items];
      setItems(updatedItems);
      saveItems(updatedItems);
      setPrompt('');
    } catch (error) {
      console.error('Error generating content:', error);
      Alert.alert('Error', 'Failed to generate content');
    } finally {
      setIsLoading(false);
    }
  };

  const handleShare = async (item: DiscoverItem) => {
    try {
      await Share.share({
        message: `${item.content}\n\nGenerated by Gemini Pro`,
      });
    } catch (error) {
      console.error('Error sharing content:', error);
    }
  };

  const handleLike = (id: string) => {
    const updatedItems = items.map(item =>
      item.id === id ? { ...item, likes: item.likes + 1 } : item
    );
    setItems(updatedItems);
    saveItems(updatedItems);
  };

  const renderItem = ({ item }: { item: DiscoverItem }) => (
    <View style={[styles.itemCard, isDarkMode && styles.darkItemCard]}>
      <View style={styles.itemHeader}>
        <MaterialIcons
          name={CONTENT_TYPES.find(t => t.id === item.type)?.icon as any}
          size={24}
          color={isDarkMode ? '#FFFFFF' : '#000000'}
        />
        <Text style={[styles.itemType, isDarkMode && styles.darkText]}>
          {CONTENT_TYPES.find(t => t.id === item.type)?.name}
        </Text>
      </View>
      <Text style={[styles.itemPrompt, isDarkMode && styles.darkText]}>
        {item.prompt}
      </Text>
      <Text style={[styles.itemContent, isDarkMode && styles.darkText]}>
        {item.content}
      </Text>
      <View style={styles.itemActions}>
        <Pressable
          style={[styles.actionButton, isDarkMode && styles.darkActionButton]}
          onPress={() => handleLike(item.id)}
        >
          <MaterialIcons name="favorite" size={20} color="#FF4081" />
          <Text style={[styles.actionText, { color: '#FF4081' }]}>{item.likes}</Text>
        </Pressable>
        <Pressable
          style={[styles.actionButton, isDarkMode && styles.darkActionButton]}
          onPress={() => handleShare(item)}
        >
          <MaterialIcons name="share" size={20} color={isDarkMode ? '#FFFFFF' : '#000000'} />
        </Pressable>
      </View>
    </View>
  );

  return (
    <SafeAreaView edges={['bottom']} style={[styles.container, isDarkMode && styles.darkContainer]}>
      <View style={[styles.inputContainer, isDarkMode && styles.darkInputContainer]}>
        <View style={styles.typeButtons}>
          <FlatList
            data={CONTENT_TYPES}
            horizontal
            showsHorizontalScrollIndicator={false}
            renderItem={({ item: type }) => (
              <Pressable
                style={[
                  styles.typeButton,
                  selectedType.id === type.id && styles.selectedTypeButton,
                  isDarkMode && styles.darkTypeButton,
                ]}
                onPress={() => setSelectedType(type)}
              >
                <MaterialIcons
                  name={type.icon as any}
                  size={20}
                  color={selectedType.id === type.id ? '#FFFFFF' : isDarkMode ? '#FFFFFF' : '#000000'}
                />
                <Text
                  style={[
                    styles.typeButtonText,
                    selectedType.id === type.id && styles.selectedTypeButtonText,
                    isDarkMode && styles.darkText,
                  ]}
                >
                  {type.name}
                </Text>
              </Pressable>
            )}
            keyExtractor={type => type.id}
            contentContainerStyle={styles.typeButtonsContent}
          />
        </View>
        <View style={styles.promptContainer}>
          <TextInput
            style={[styles.input, isDarkMode && styles.darkInput]}
            value={prompt}
            onChangeText={setPrompt}
            placeholder={`What's on your mind?`}
            placeholderTextColor={isDarkMode ? '#666666' : '#999999'}
            multiline
            maxLength={100}
            editable={!!apiKey}
          />
          <Pressable
            style={[
              styles.generateButton,
              (!prompt.trim() || !apiKey) && styles.generateButtonDisabled,
              isDarkMode && styles.darkGenerateButton,
            ]}
            onPress={handleGenerate}
            disabled={!prompt.trim() || isLoading || !apiKey}
          >
            {isLoading ? (
              <ActivityIndicator color="#FFFFFF" />
            ) : (
              <MaterialIcons
                name="auto-awesome"
                size={24}
                color={prompt.trim() && apiKey ? '#FFFFFF' : isDarkMode ? '#666666' : '#999999'}
              />
            )}
          </Pressable>
        </View>
      </View>
      <FlatList
        data={items}
        renderItem={renderItem}
        keyExtractor={item => item.id}
        contentContainerStyle={styles.listContent}
        ListEmptyComponent={() => (
          <View style={styles.emptyState}>
            <MaterialIcons
              name="auto-awesome"
              size={48}
              color={isDarkMode ? '#666666' : '#999999'}
            />
            <Text style={[styles.emptyStateTitle, isDarkMode && styles.darkText]}>
              No Content Yet
            </Text>
            <Text style={[styles.emptyStateDescription, isDarkMode && styles.darkEmptyStateDescription]}>
              Generate some amazing content to share with others
            </Text>
          </View>
        )}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  darkContainer: {
    backgroundColor: '#000000',
  },
  inputContainer: {
    padding: 16,
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: '#E5E5E5',
    backgroundColor: '#FFFFFF',
  },
  darkInputContainer: {
    backgroundColor: '#000000',
    borderBottomColor: '#333333',
  },
  typeButtons: {
    marginBottom: 16,
  },
  typeButtonsContent: {
    paddingHorizontal: 16,
  },
  typeButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: '#F5F5F5',
    marginRight: 8,
  },
  darkTypeButton: {
    backgroundColor: '#1C1C1E',
  },
  selectedTypeButton: {
    backgroundColor: '#6B4EFF',
  },
  typeButtonText: {
    marginLeft: 4,
    fontSize: 14,
    fontWeight: '600',
    color: '#000000',
  },
  selectedTypeButtonText: {
    color: '#FFFFFF',
  },
  darkText: {
    color: '#FFFFFF',
  },
  promptContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
  },
  input: {
    flex: 1,
    backgroundColor: '#F5F5F5',
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingTop: 12,
    paddingBottom: 12,
    marginRight: 8,
    color: '#000000',
    fontSize: 16,
    maxHeight: 100,
  },
  darkInput: {
    backgroundColor: '#1C1C1E',
    color: '#FFFFFF',
  },
  generateButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: '#6B4EFF',
    justifyContent: 'center',
    alignItems: 'center',
  },
  generateButtonDisabled: {
    backgroundColor: '#F5F5F5',
  },
  darkGenerateButton: {
    backgroundColor: '#1C1C1E',
  },
  listContent: {
    padding: 16,
  },
  itemCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  darkItemCard: {
    backgroundColor: '#1C1C1E',
    borderColor: '#333333',
  },
  itemHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  itemType: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000000',
    marginLeft: 8,
  },
  itemPrompt: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 8,
  },
  itemContent: {
    fontSize: 16,
    color: '#000000',
    lineHeight: 24,
  },
  itemActions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginTop: 16,
    gap: 8,
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 8,
    borderRadius: 20,
    backgroundColor: '#F5F5F5',
    gap: 4,
  },
  darkActionButton: {
    backgroundColor: '#2C2C2E',
  },
  actionText: {
    fontSize: 14,
    fontWeight: '600',
  },
  emptyState: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 16,
    marginTop: 100,
  },
  emptyStateTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#000000',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyStateDescription: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
  },
  darkEmptyStateDescription: {
    color: '#999999',
  },
}); 